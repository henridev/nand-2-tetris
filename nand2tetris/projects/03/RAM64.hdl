// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=a1, b=b1, c=c1, d=d1, e=e1, f=f1, g=g1, h=h1);
    RAM8(in=in, load=a1, address=address[0..2], out=out0); // 0-8 - at 000 - last not included
    RAM8(in=in, load=b1, address=address[0..2], out=out1); // 8 - 16 - at 001
    RAM8(in=in, load=c1, address=address[0..2], out=out2); // 16 - 24 - at 010
    RAM8(in=in, load=d1, address=address[0..2], out=out3); // 24 - 32 - at 011
    RAM8(in=in, load=e1, address=address[0..2], out=out4); // 32 - 40 - at 100
    RAM8(in=in, load=f1, address=address[0..2], out=out5); // 40 - 48 - at 101
    RAM8(in=in, load=g1, address=address[0..2], out=out6); // 48 - 56 - at 110
    RAM8(in=in, load=h1, address=address[0..2], out=out7); // 56 - 64 - at 111
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4,
                 f=out5, g=out6, h=out7, sel=address[3..5], out=out);

}