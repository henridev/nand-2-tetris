CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b[0..15]=false, sel=zx, out=out1);
    Not16(in=out1, out=out2);
    Mux16(a=out1, b=out2, sel=nx, out=fInX);

    Mux16(a=y, b[0..15]=false, sel=zy, out=out4);
    Not16(in=out4, out=out5);
    Mux16(a=out4, b=out5, sel=ny, out=fInY);

    And16(a=fInX, b=fInY, out=muxIn1); 
    Add16(a=fInX, b=fInY, out=muxIn2); 
    Mux16(a=muxIn1, b=muxIn2, sel=f, out=fOut);

    Not16(in=fOut, out=notOut);
    Mux16(a=fOut, b=notOut, sel=no, out=out, out[0..7]=lsbOut, out[8..15]=msbOut, out[15]=negation);

    Or8Way(in=lsbOut, out=out8Lsb);
    Or8Way(in=msbOut, out=out8Msb);
    Or(a=out8Lsb, b=out8Msb, out=outOr);
    Not(in=outOr, out=zr);

    And(a=negation, b=true, out=ng);
}